/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Preview
 #	author : miyako
 #	2017/10/08
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

#include "Preview.h"
#import <sys/stat.h>

#define PREVIEW_APP_ID @"com.apple.Preview"
#define EXPORT_TIMEOUT 120
#define EXPORT_SLEEP 3
#define MAX_RETRY 3

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- Preview

		case 1 :
			PREVIEW_DOCUMENT_TO_PDF(pResult, pParams);
			break;

	}
}

#include <errno.h>
#include <sys/sysctl.h>

BOOL scripting_not_supported()
{
	BOOL _scripting_not_supported = FALSE;
	
	char str[256];
	size_t size = sizeof(str);
	if(!sysctlbyname("kern.osrelease", str, &size, NULL, 0))
	{
		@autoreleasepool
		{
			NSString *version = [NSString stringWithFormat:@"%s", str];
			NSLog(@"kern.osrelease:%@", version);
			if(([version hasPrefix:@"12."]) | ([version hasPrefix:@"11."]) | ([version hasPrefix:@"10."]))
			{
				_scripting_not_supported = TRUE;
			}
		}
	}
	/*
	 16.x.x  macOS 10.12.x Sierra
	 15.x.x  OS X  10.11.x El Capitan
	 14.x.x  OS X  10.10.x Yosemite
	 13.x.x  OS X  10.9.x  Mavericks
	 12.x.x  OS X  10.8.x  Mountain Lion
	 11.x.x  OS X  10.7.x  Lion
	 10.x.x  OS X  10.6.x  Snow Leopard
	 9.x.x  OS X  10.5.x  Leopard
	 8.x.x  OS X  10.4.x  Tiger
	 7.x.x  OS X  10.3.x  Panther
	 6.x.x  OS X  10.2.x  Jaguar
	 5.x    OS X  10.1.x  Puma 
	 */
	return _scripting_not_supported;
}


#pragma mark -

void method1(C_TEXT& Param1, C_TEXT& Param2)
{
	//scripting bridge
	PreviewApplication *application = [SBApplication applicationWithBundleIdentifier:PREVIEW_APP_ID];
	
	NSURL *url = Param1.copyUrl();
	NSURL *path = Param2.copyUrl();
	
	Boolean accepts = false;
	
	@autoreleasepool
	{
		NSURL *appUrl = [[NSWorkspace sharedWorkspace]URLForApplicationWithBundleIdentifier:PREVIEW_APP_ID];
		
		if(noErr == LSCanURLAcceptURL((CFURLRef)url, (CFURLRef)appUrl, kLSRolesViewer, kLSAcceptDefault, &accepts))
		{
			if(accepts)
			{
				//this will unhide the hidden app
				PreviewDocument *document = [application open:url];
			
				struct stat stat1;
				
				[[NSFileManager defaultManager]removeItemAtURL:path error:nil];
				
				for(int i = 0; i < MAX_RETRY;i++)
				{
					[document saveAs:@"com.adobe.pdf" in:path];
					
					if(!stat([[path path]fileSystemRepresentation], &stat1))
					{
						//minimum pdf seems to be 920 bytes
						if((stat1.st_size) < 1000)
						{
							NSLog(@"file size is:%lld on call %d", stat1.st_size, i);
							PA_PutProcessToSleep(PA_GetCurrentProcessNumber(), EXPORT_SLEEP);
							continue;
						}
						break;
					}
				}
				
				[document closeSaving:PreviewSavoNo savingIn:url];
			}
		}
	}
	
	[path release];
	[url release];
}

void method2(C_TEXT& Param1, C_TEXT& Param2)
{
	NSString *src = Param1.copyPath();
	NSString *dst = Param2.copyPath();
	NSURL *url = Param1.copyUrl();
	
	NSString *script =
	@"on convert_to_pdf(src_path, dst_path) \n\
	tell application id \"com.apple.Preview\" \n\
	set d to open (POSIX file src_path as alias) \n\
	save d as \"com.adobe.pdf\" in POSIX file dst_path \n\
	close d saving no \n\
	end tell \n\
	end convert_to_pdf";
	
	NSAppleScript *scriptObject = [[NSAppleScript alloc]initWithSource:script];
	
	Boolean accepts = false;
	
	@autoreleasepool
	{
		NSURL *appUrl = [[NSWorkspace sharedWorkspace]URLForApplicationWithBundleIdentifier:PREVIEW_APP_ID];
	
		if(noErr == LSCanURLAcceptURL((CFURLRef)url, (CFURLRef)appUrl, kLSRolesViewer, kLSAcceptDefault, &accepts))
		{
			if(accepts)
			{
				[[NSFileManager defaultManager]removeItemAtPath:dst error:nil];
				NSAppleEventDescriptor *parameters = [NSAppleEventDescriptor listDescriptor];
				NSAppleEventDescriptor *src_path = [NSAppleEventDescriptor descriptorWithString:src];
				[parameters insertDescriptor:src_path atIndex:1];
				NSAppleEventDescriptor *dst_path = [NSAppleEventDescriptor descriptorWithString:dst];
				[parameters insertDescriptor:dst_path atIndex:2];
				
				ProcessSerialNumber psn = {0, kCurrentProcess};
				NSAppleEventDescriptor *target =
				[NSAppleEventDescriptor descriptorWithDescriptorType:typeProcessSerialNumber
																											 bytes:&psn
																											length:sizeof(ProcessSerialNumber)];
				
				NSAppleEventDescriptor *handler = [NSAppleEventDescriptor descriptorWithString:@"convert_to_pdf"];
				
				NSAppleEventDescriptor *event =
				[NSAppleEventDescriptor appleEventWithEventClass:kASAppleScriptSuite
																								 eventID:kASSubroutineEvent
																				targetDescriptor:target
																								returnID:kAutoGenerateReturnID
																					 transactionID:kAnyTransactionID];
				
				[event setParamDescriptor:handler forKeyword:keyASSubroutineName];
				[event setParamDescriptor:parameters forKeyword:keyDirectObject];
				
				if([scriptObject compileAndReturnError:nil])
				{
					struct stat stat1;
					const char *path = [dst UTF8String];
					
					for(int i = 0; i < MAX_RETRY;i++)
					{
						[scriptObject executeAppleEvent:event error:nil];
						
						if(!stat(path, &stat1))
						{
							//minimum pdf seems to be 920 bytes
							if((stat1.st_size) < 1000)
							{
								NSLog(@"file size is:%lld on call %d", stat1.st_size, i);
								PA_PutProcessToSleep(PA_GetCurrentProcessNumber(), EXPORT_SLEEP);
								continue;
							}
							break;
						}
					}
				}
			}
		}
	}
	[scriptObject release];
	
	[url release];
	[src release];
	[dst release];
}

// ------------------------------------ Preview -----------------------------------

void PREVIEW_DOCUMENT_TO_PDF(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	
	if(scripting_not_supported())
	{
		method2(Param1, Param2);
	}else
	{
		method1(Param1, Param2);
	}

}

